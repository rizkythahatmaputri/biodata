# -*- coding: utf-8 -*-
"""Rizkytha Hatma Putri_H1D021044_TSP_kotabukittinggi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UxRBI1-nDf1bDUI8BfqwxDxBvMRPkxzA
"""

import math
import random as rd
import numpy as np

"""nilai fitness"""

# Menghitung nilai fitness sebagai satu dibagi total jarak
def nilaiFitness(kombinasi, node):
    total_jarak = 0
    for i in range(1, len(kombinasi)):
        total_jarak += math.sqrt((node[kombinasi[i]][0] - node[kombinasi[i-1]][0])**2 + (node[kombinasi[i-1]][1] - node[kombinasi[i]][1])**2)
    return 1 / total_jarak

"""seleksi parent"""

# Menggunakan roulette wheel selection untuk memilih orang tua
def rouletteWheelSelection(populasi, fitnesses):
    total_fitness = sum(fitnesses)
    selection_probs = [f / total_fitness for f in fitnesses]
    cumulative_probs = np.cumsum(selection_probs)
    rand_val = np.random.rand()
    for i, cumulative_prob in enumerate(cumulative_probs):
        if rand_val < cumulative_prob:
            return populasi[i]

"""generate kromosom"""

# Membuat kromosom acak
def generateKromosom(jumlahPopulasi, panjangKromosom):
    populasi = []
    for _ in range(jumlahPopulasi):
        kromosom = np.arange(panjangKromosom)
        np.random.shuffle(kromosom)
        populasi.append(list(kromosom))
    return populasi

"""crossover"""

# Proses crossover
def crossover(kromosom1, kromosom2, pC):
    if np.random.rand() <= pC:
        point = np.random.randint(1, len(kromosom1) - 1)
        tmpKromosom1 = kromosom1[:point] + [gene for gene in kromosom2 if gene not in kromosom1[:point]]
        tmpKromosom2 = kromosom2[:point] + [gene for gene in kromosom1 if gene not in kromosom2[:point]]
        return tmpKromosom1, tmpKromosom2
    else:
        return kromosom1, kromosom2

"""mutasi"""

# Proses mutasi
def mutasi(kromosom, pM):
    for i in range(len(kromosom)):
        if np.random.rand() <= pM:
            j = np.random.randint(len(kromosom))
            kromosom[i], kromosom[j] = kromosom[j], kromosom[i]
    return kromosom

"""pergantian generasi"""

# Algoritma genetika steady state
def steadyState(jumlahGeneration, populasi, jumlahPopulasi, pC, pM, node):
    for _ in range(jumlahGeneration):
        fitnesses = [nilaiFitness(kromosom, node) for kromosom in populasi]
        new_population = []
        while len(new_population) < jumlahPopulasi:
            parent1 = rouletteWheelSelection(populasi, fitnesses)
            parent2 = rouletteWheelSelection(populasi, fitnesses)
            child1, child2 = crossover(parent1, parent2, pC)
            child1 = mutasi(child1, pM)
            child2 = mutasi(child2, pM)
            new_population.extend([child1, child2])
        populasi = sorted(new_population, key=lambda x: -nilaiFitness(x, node))[:jumlahPopulasi]
    return populasi

"""inisialisasi variabel"""

node = [[0, 0.65, 2.35, 2.1, 1.1, 1.6, 1.6, 2.4],
        [0.95, 0, 1.55, 2.3, 1.9, 2.2, 0.95, 3],
        [1.75, 1.55, 0, 2.95, 2.75, 2.85, 1.55, 3.65],
        [2.1, 2.3, 2.8, 0, 2.1, 2.3, 1.6, 2.9],
        [1, 0.95, 1.55, 1.6, 0, 1.5, 1.7, 2.9],
        [1.2, 1.4, 2.85, 2.3, 0.7, 8, 1.5, 2.8],
        [1.1, 0.95, 1.55, 1.6, 1.3, 1.5, 0, 2.4],
        [2.5, 3, 3.65, 2.9, 2.4, 2.8, 2.3, 0]]

jumlahGenerasi = 100
jumlahIndividu = 20
panjangTournament = round(jumlahIndividu/2)
pC = 0.7
pM = 0.1

"""main program"""

# Menghasilkan populasi awal
pop = generateKromosom(jumlahIndividu, len(node))

# Menjalankan algoritma genetika
pop = steadyState(jumlahGenerasi, pop, jumlahIndividu, pC, pM, node)

# Menampilkan hasil
best_route = pop[0]
best_distance = 1 / nilaiFitness(best_route, node)

print("Generasi ke-" + str(jumlahGenerasi))
print("Rute terbaik : " + str(best_route))
print("Cost (jarak) : {:.2f} KM".format(best_distance))